# version: '3'

volumes:
  postgres_data: {}
  postgres_backup: {}


services:
  database:
    restart: always
    image: postgres:13-alpine
    container_name: pycam_db
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=pycam
    ports:
      - "8092:5432" # to avoid local ports from clashing
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 5

  # Using traefik as reverse proxy
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.9
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock

  web:
    restart: always
    container_name: pycam_web
    user: "root:pycam"
    build:
        context: .
        dockerfile: Dockerfile
    volumes:
      - .:/app
    labels:
      - "traefik.http.routers.web.rule=Host(`pycam.docker.localhost`)"
    ports:
      - "8001:8000"  # Changed from 8000:8000 to resolve port conflict
    depends_on:
      - database
    entrypoint: ["/bin/sh","-c"]
    command:
    - |
      pwd
      python manage.py makemigrations
      python manage.py migrate
      # Create superuser if not exists
      python manage.py shell <<EOF
      from django.contrib.auth.models import User
      user, created = User.objects.get_or_create(username='devadmin', defaults={'email': 'admin@example.com', 'is_superuser': True, 'is_staff': True})
      if created:
          user.set_password('nimda')
          user.save()
          print("Superuser 'devadmin' created.")
      else:
          print("Superuser 'devadmin' already exists.")
      EOF

      echo Starting Django development server..
      poetry run pycam/manage.py runserver 0.0.0.0:8000
    environment:
      - DJANGO_SETTINGS_MODULE=pycam.settings
      - DATABASE_URL=postgresql://postgres:postgres@database:5432/pycam
      - DB_NAME=pycam
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=database
      - ENVIRONMENT=dev

networks:
  default:
      name: pycamuresandpower

