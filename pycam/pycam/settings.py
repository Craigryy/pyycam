"""
Django settings for pycam project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

# Try to import dotenv, but handle case when it's not installed
try:
    from dotenv import load_dotenv
    # Load environment variables from .env file
    load_dotenv()
except ImportError:
    # python-dotenv not installed, continue without it
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-change-this-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', 'localhost:8001', 'localhost:8090', '127.0.0.1','*']

# CSRF settings
CSRF_TRUSTED_ORIGINS = ['http://localhost:8090', 'http://127.0.0.1:8090', 'http://localhost:8080', 'http://pycam.docker.localhost']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for django-allauth
    'editor',
    'pwa',  # PWA is already installed

    # django-allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # Social providers
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.instagram',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Add the account middleware:
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'pycam.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [
            os.path.join(PROJECT_DIR, "templates"),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pycam.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Use dj-database-url for simpler database configuration
import dj_database_url

# Check if we're running on Render
IS_RENDER = 'RENDER' in os.environ

# Default to PostgreSQL locally unless SQLITE is explicitly True
SQLITE = os.environ.get('SQLITE', '').lower() == 'true'

# Configure database based on environment
if IS_RENDER:
    # On Render, use the provided DATABASE_URL
    database_url = os.environ.get('DATABASE_URL')
    if database_url:
        DATABASES = {
            'default': dj_database_url.parse(database_url, conn_max_age=0)
        }
    else:
        raise Exception("No DATABASE_URL found in Render environment")
elif SQLITE:
    # Use SQLite for local development if explicitly requested
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    # Use local PostgreSQL by default for local development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_NAME', 'pycam_global'),
            'USER': os.environ.get('DB_USER', 'pycam_user'),
            'PASSWORD': os.environ.get('DB_PASSWORD', 'pycam_password'),
            'HOST': os.environ.get('DB_HOST', 'localhost'),
            'PORT': os.environ.get('DB_PORT', '5432'),
            'CONN_MAX_AGE': 0,  # Always close connections after each request
            'ATOMIC_REQUESTS': True,  # Enable transaction per request
        }
    }

# Always apply these database settings
for db_name in DATABASES:
    DATABASES[db_name]['ATOMIC_REQUESTS'] = True
    DATABASES[db_name]['CONN_MAX_AGE'] = 0  # Always close connections


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django AllAuth Settings
SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Social account provider settings
SOCIALACCOUNT_PROVIDERS = {
    'facebook': {
        'METHOD': 'oauth2',
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'INIT_PARAMS': {'cookie': True},
        'FIELDS': [
            'id',
            'email',
            'name',
            'first_name',
            'last_name',
            'picture'
        ],
        'EXCHANGE_TOKEN': True,
        'VERIFIED_EMAIL': False,
        'VERSION': 'v13.0',
        'APP': {
            'client_id': '',
            'secret': '',
            'key': '',
        },
    },
    'google': {
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'APP': {
            'client_id': '',
            'secret': '',
            'key': '',
        },
    },
    'github': {
        'APP': {
            'client_id': 'Iv23liy2fTBsqUcvrb8S',
            'secret': '8ac8c2280f9d5a64537d4d5e3491e7bb2e556232',
            'key': '',
        },
    },
    'instagram': {
        'APP': {
            'client_id': os.environ.get('INSTAGRAM_CLIENT_ID', ''),
            'secret': os.environ.get('INSTAGRAM_SECRET_KEY', ''),
            'key': '',
        },
    },
}

# Redirect URLs
LOGIN_URL = '/'
LOGIN_REDIRECT_URL = 'home'
ACCOUNT_LOGOUT_REDIRECT_URL = '/'

# Additional ALLAUTH settings
# These are updated from deprecated settings
ACCOUNT_LOGIN_METHODS = {'username', 'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Disable email verification
ACCOUNT_LOGOUT_ON_GET = True  # Bypass the logout confirmation page

# Disable login confirmations and streamline login process
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_SESSION_REMEMBER = True  # Remember user sessions by default
ACCOUNT_CONFIRM_EMAIL_ON_GET = True  # Confirm email immediately on click
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = 'home'
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = 'account_login'
ACCOUNT_PASSWORD_RESET_TIMEOUT = 259200  # 3 days in seconds

# Social authentication bypass settings
SOCIALACCOUNT_AUTO_SIGNUP = True  # Directly create user account, no intermediate form
SOCIALACCOUNT_LOGIN_ON_GET = True  # Process social login on GET request (no confirmation page)
ACCOUNT_LOGIN_ON_GET = True  # Process regular login on GET request
SOCIALACCOUNT_FORMS = {}  # Use default forms when necessary

# Additional bypass settings
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_EMAIL_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = 'none'
# ACCOUNT_AUTHENTICATION_METHOD is deprecated, replaced by:
# ACCOUNT_LOGIN_METHODS = {'username', 'email'} (already defined above)

# Enable social accounts
SOCIALACCOUNT_ENABLED = True

# PWA settings
PWA_APP_NAME = 'pycam'
PWA_APP_DESCRIPTION = "a photo editor "
PWA_APP_THEME_COLOR = '#0A0302'
PWA_APP_BACKGROUND_COLOR = '#ffffff'
PWA_APP_DISPLAY = 'standalone'
PWA_APP_SCOPE = '/'
PWA_APP_ORIENTATION = 'any'
PWA_APP_START_URL = '/'
PWA_APP_DIR = 'ltr'
PWA_APP_STATUS_BAR_COLOR = 'default'

PWA_APP_LANG = 'en-US'
PWA_APP_SHORTCUTS = [
    {
        'name': 'Shortcut',
        'url': '/',
        'description': 'a photo editor '
    }
]
